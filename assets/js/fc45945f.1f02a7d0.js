"use strict";(self.webpackChunkextremeagile=self.webpackChunkextremeagile||[]).push([[259],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=i,m=d["".concat(u,".").concat(g)]||d[g]||p[g]||o;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},847:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:1},a="Continuous Integration",s={unversionedId:"devops/continuous-integration/continuous-integration",id:"devops/continuous-integration/continuous-integration",title:"Continuous Integration",description:"continuous integration is a key DevOps practice that allows frequent code integration and automated testing, enabling rapid software delivery with reduced bugs and issues. It relies on version control, test automation and continuous processes.",source:"@site/docs/devops/continuous-integration/continuous-integration.md",sourceDirName:"devops/continuous-integration",slug:"/devops/continuous-integration/",permalink:"/docs/devops/continuous-integration/",draft:!1,editUrl:"https://github.com/extreme-agile-community/website/tree/main/packages/create-docusaurus/templates/shared/docs/devops/continuous-integration/continuous-integration.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"DevOps",permalink:"/docs/devops/"},next:{title:"Continuous Delivery",permalink:"/docs/devops/continuous-delivery/"}},u={},l=[{value:"Definition",id:"definition",level:2},{value:"Goals",id:"goals",level:2},{value:"Practices",id:"practices",level:2}],c={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"continuous-integration"},"Continuous Integration"),(0,i.kt)("admonition",{title:"TL;DR;",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"continuous integration is a key DevOps practice that allows frequent code integration and automated testing, enabling rapid software delivery with reduced bugs and issues. It relies on version control, test automation and continuous processes.")),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("p",null,"Continuous integration (CI) is a software development practice where developers regularly merge their code changes into a shared repository, after which automated builds and tests are run. "),(0,i.kt)("h2",{id:"goals"},"Goals"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Detect errors and bugs early through frequent automated testing"),(0,i.kt)("li",{parentName:"ul"},"Improve software quality through regular code integration and testing"),(0,i.kt)("li",{parentName:"ul"},"Reduce time to validate and release new updates by automating build and test processes"),(0,i.kt)("li",{parentName:"ul"},"Improve developer productivity by reducing integration issues")),(0,i.kt)("h2",{id:"practices"},"Practices"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Maintaining a code repository (e.g. Git) for developers to regularly commit code"),(0,i.kt)("li",{parentName:"ul"},"Automatically building the code and running tests whenever changes are committed"),(0,i.kt)("li",{parentName:"ul"},"Quickly fixing any issues that are detected by automated tests"),(0,i.kt)("li",{parentName:"ul"},"Frequently integrating code changes from multiple developers rather than long integration periods"),(0,i.kt)("li",{parentName:"ul"},"Extensive use of test automation, including unit, integration and acceptance tests"),(0,i.kt)("li",{parentName:"ul"},"Providing rapid feedback on build and test results to developers"),(0,i.kt)("li",{parentName:"ul"},"Using a CI server or cloud service to automate the build, test and reporting process")))}p.isMDXComponent=!0}}]);